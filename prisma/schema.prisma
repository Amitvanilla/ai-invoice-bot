generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  name          String?
  email         String   @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?

  accounts        Account[]
  sessions        Session[]
  chats           ChatSession[]
  invoices        Invoice[]
  invoiceSearches InvoiceSearch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatSession {
  id        String   @id @default(cuid())
  title     String   @default("New chat")
  userId    String
  messages  Message[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id          String      @id @default(cuid())
  role        MessageRole
  content     String
  chatId      String
  createdAt   DateTime @default(now())

  chat ChatSession @relation(fields: [chatId], references: [id], onDelete: Cascade)
}

enum MessageRole {
  user
  assistant
  system
}

model Invoice {
  id              String   @id @default(cuid())
  userId          String
  filename        String
  extractedData   Json?
  classifiedData  Json?
  embeddings      String?  // Store as JSON string for now, can be upgraded to vector later
  status          String   @default("processing")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

model InvoiceSearch {
  id            String   @id @default(cuid())
  userId        String
  query         String
  results       Json     // Store search results
  createdAt     DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
}